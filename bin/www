#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tretatempo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var porta = normalizePort(process.env.PORT || '3000');
app.set('port', porta);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(porta);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a porta into a number, string, or false.
 */

function normalizePort(val) {
  var porta = parseInt(val, 10);

  if (isNaN(porta)) {
    // named pipe
    return val;
  }

  if (porta >= 0) {
    // porta number
    return porta;
  }

  return false;
}

// função para respostas amigaveis de erros no servidor HTTP
function onError(err) {
  if (err) {
    if (err.syscall !== 'listen') {
      throw err;
    }

    const port = typeof porta === 'string' ? 'Pipe ' + porta : 'Porta ' + porta;

    // Respostas 'amigaveis' para erros especificos
    switch (err.code) {
      case 'EACCES':
        console.error(port + ' requer privilégios elevados.');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(port + ' já está em uso.');
        process.exit(1);
        break;
      default:
        throw err;
    }
  }
}

// função para respostas de eventos de execução no servidor HTTP
function onListening() {
  const addr = server.address();
  const host = typeof addr === 'string' ? addr['address'] : '';
  const port = typeof addr === 'string' ? 'Pipe ' + addr : 'Porta ' + addr.port;

  debug('Executando servidor no [Host ' + host + '] e [' + port + ']');
  console.log('Executando servidor no [Host ' + host + '] e [' + port + ']');
}